version: '3.8'

services:
  # Main FT Transfer API Service
  ft-transfer-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ft-transfer-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - REDIS_ENABLED=true
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./benchmarks/results:/app/benchmarks/results
    depends_on:
      - redis
      - prometheus
    networks:
      - ft-transfer-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer (NGINX) for multiple instances
  nginx:
    image: nginx:alpine
    container_name: ft-transfer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - ft-transfer-api
    networks:
      - ft-transfer-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ft-transfer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
    networks:
      - ft-transfer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ft-transfer-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ft-transfer-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ft-transfer-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ft-transfer-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ft-transfer-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ft-transfer-network

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: ft-transfer-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - ft-transfer-network

  # Benchmark runner for testing
  benchmark-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ft-transfer-benchmark
    profiles:
      - benchmark
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    volumes:
      - ./benchmarks/results:/app/benchmarks/results
    command: ["npm", "run", "benchmark"]
    depends_on:
      - ft-transfer-api
    networks:
      - ft-transfer-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  ft-transfer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16